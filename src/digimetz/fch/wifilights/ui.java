/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package digimetz.fch.wifilights;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author saliya
 */
public class ui extends javax.swing.JFrame implements WindowListener {

    private Socket WIFI_SOCKET;
    private String WIFI_IP = "";
    private String WIFI_PORT = "";
    private byte[] WIFI_BUFFER;
    private String WIFI_BUFFER_TO_STRING;
    private Thread WIFI_RECEIVE_THREAD;
    private Thread WIFI_CONNECT_THREAD;
    private boolean WIFI_CONNECTED = false;
    private boolean WIFI_OUT_STREAM_OPEN = false;
    private BufferedWriter WIFI_BUFFERED_WRITER;

    /**
     * Creates new form ui
     */
    public ui() {
        initComponents();
        initx();
    }

    private void initx() {
        addWindowListener(this);
        BTN_L1.setEnabled(false);
        BTN_L2.setEnabled(false);
        BTN_L3.setEnabled(false);
        BTN_L4.setEnabled(false);
        BTN_L5.setEnabled(false);
        sabtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel17 = new javax.swing.JLabel();
        WIFI_IP_TXF = new javax.swing.JTextField();
        WIFI_PORT_TXF = new javax.swing.JTextField();
        WIFI_CONNECT_BTN = new javax.swing.JButton();
        sabtn = new javax.swing.JToggleButton();
        BTN_L1 = new javax.swing.JToggleButton();
        BTN_L2 = new javax.swing.JToggleButton();
        BTN_L3 = new javax.swing.JToggleButton();
        BTN_L4 = new javax.swing.JToggleButton();
        BTN_L5 = new javax.swing.JToggleButton();
        BTN_ABOUT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("5 channel light automation development board : WiFi");

        jLabel17.setText("IP Address :");

        WIFI_IP_TXF.setText("192.168.4.1");

        WIFI_PORT_TXF.setText("80");

        WIFI_CONNECT_BTN.setText("Connect");
        WIFI_CONNECT_BTN.setFocusPainted(false);
        WIFI_CONNECT_BTN.setFocusable(false);
        WIFI_CONNECT_BTN.setRequestFocusEnabled(false);
        WIFI_CONNECT_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WIFI_CONNECT_BTNActionPerformed(evt);
            }
        });

        sabtn.setText("All ON");
        sabtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sabtnActionPerformed(evt);
            }
        });

        BTN_L1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/lon.png"))); // NOI18N
        BTN_L1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_L1.setRequestFocusEnabled(false);
        BTN_L1.setRolloverEnabled(false);
        BTN_L1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/loff.png"))); // NOI18N
        BTN_L1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_L1ActionPerformed(evt);
            }
        });

        BTN_L2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/lon.png"))); // NOI18N
        BTN_L2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_L2.setRequestFocusEnabled(false);
        BTN_L2.setRolloverEnabled(false);
        BTN_L2.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/loff.png"))); // NOI18N
        BTN_L2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_L2ActionPerformed(evt);
            }
        });

        BTN_L3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/lon.png"))); // NOI18N
        BTN_L3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_L3.setRequestFocusEnabled(false);
        BTN_L3.setRolloverEnabled(false);
        BTN_L3.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/loff.png"))); // NOI18N
        BTN_L3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_L3ActionPerformed(evt);
            }
        });

        BTN_L4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/lon.png"))); // NOI18N
        BTN_L4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_L4.setRequestFocusEnabled(false);
        BTN_L4.setRolloverEnabled(false);
        BTN_L4.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/loff.png"))); // NOI18N
        BTN_L4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_L4ActionPerformed(evt);
            }
        });

        BTN_L5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/lon.png"))); // NOI18N
        BTN_L5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_L5.setRequestFocusEnabled(false);
        BTN_L5.setRolloverEnabled(false);
        BTN_L5.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/digimetz/fch/wifilights/res/loff.png"))); // NOI18N
        BTN_L5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_L5ActionPerformed(evt);
            }
        });

        BTN_ABOUT.setText("about");
        BTN_ABOUT.setRequestFocusEnabled(false);
        BTN_ABOUT.setVerifyInputWhenFocusTarget(false);
        BTN_ABOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ABOUTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(sabtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BTN_ABOUT))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WIFI_IP_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WIFI_PORT_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(WIFI_CONNECT_BTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(BTN_L1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BTN_L2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTN_L3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTN_L4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(BTN_L5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WIFI_PORT_TXF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WIFI_CONNECT_BTN)
                    .addComponent(WIFI_IP_TXF)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BTN_L1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTN_L2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTN_L3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BTN_L4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(BTN_L5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sabtn)
                    .addComponent(BTN_ABOUT))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void WIFI_CONNECT_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WIFI_CONNECT_BTNActionPerformed
        if (WIFI_IP_TXF.getText().isEmpty() || WIFI_PORT_TXF.getText().isEmpty()) {
            return;
        }
        WIFI_CONNECT_BTN.setEnabled(false);
        WIFI_IP_TXF.setEnabled(false);
        WIFI_PORT_TXF.setEnabled(false);

        WIFI_IP_TXF.setRequestFocusEnabled(false);
        WIFI_PORT_TXF.setRequestFocusEnabled(false);

        WIFI_CONNECT_THREAD = new Thread(() -> {
            if (WIFI_isConnected()) {
                WIFI_closeConnecition();
                WIFI_SOCKET = null;
                WIFI_BUFFER = null;
                WIFI_CONNECT_BTN.setText("Connect");
                WIFI_CONNECT_BTN.setEnabled(true);

                BTN_L1.setEnabled(false);
                BTN_L2.setEnabled(false);
                BTN_L3.setEnabled(false);
                BTN_L4.setEnabled(false);
                BTN_L5.setEnabled(false);
                sabtn.setEnabled(false);

                WIFI_CONNECTED = true;
                WIFI_OUT_STREAM_OPEN = true;

                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);

                return;
            }
            WIFI_IP = WIFI_IP_TXF.getText();
            WIFI_PORT = WIFI_PORT_TXF.getText();
            if (!isNumeric(WIFI_PORT)) {
                WIFI_PORT_TXF.setText("80");
                WIFI_PORT = WIFI_PORT_TXF.getText();
            }
            try {
                WIFI_SOCKET = new Socket(WIFI_IP, Integer.valueOf(WIFI_PORT));
                WIFI_CONNECT_BTN.setText("Disconnect");
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(false);
                WIFI_PORT_TXF.setEnabled(false);
                WIFI_IP_TXF.setRequestFocusEnabled(false);
                WIFI_PORT_TXF.setRequestFocusEnabled(false);
                ReceiveData();

                sabtn.setEnabled(true);

                BTN_L1.setEnabled(true);
                BTN_L2.setEnabled(true);
                BTN_L3.setEnabled(true);
                BTN_L4.setEnabled(true);
                BTN_L5.setEnabled(true);
                sabtn.setEnabled(true);

            } catch (UnknownHostException e1) {
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);

            } catch (IOException e1) {
                WIFI_CONNECT_BTN.setEnabled(true);
                WIFI_IP_TXF.setEnabled(true);
                WIFI_PORT_TXF.setEnabled(true);
                WIFI_IP_TXF.setRequestFocusEnabled(true);
                WIFI_PORT_TXF.setRequestFocusEnabled(true);
                JOptionPane.showMessageDialog(this, "cannot connect to " + WIFI_IP + "  " + WIFI_PORT);
            }
        });
        WIFI_CONNECT_THREAD.start();
    }//GEN-LAST:event_WIFI_CONNECT_BTNActionPerformed

    private void sabtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sabtnActionPerformed

        if (sabtn.isSelected()) {
            sabtn.setText("ALL OFF");

            BTN_L1.setSelected(true);
            BTN_L2.setSelected(true);
            BTN_L3.setSelected(true);
            BTN_L4.setSelected(true);
            BTN_L5.setSelected(true);

            try {
                SendData("a");
                SendData("b");
                SendData("c");
                SendData("d");
                SendData("e");

            } catch (Exception ex) {
                Logger.getLogger(ui.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            sabtn.setText("ALL ON");
            BTN_L1.setSelected(false);
            BTN_L2.setSelected(false);
            BTN_L3.setSelected(false);
            BTN_L4.setSelected(false);
            BTN_L5.setSelected(false);

            try {
                SendData("A");
                SendData("B");
                SendData("C");
                SendData("D");
                SendData("E");

            } catch (Exception ex) {
                Logger.getLogger(ui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_sabtnActionPerformed

    private void BTN_L1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_L1ActionPerformed
        if (BTN_L1.isSelected()) {
            try {
                SendData("a");
            } catch (Exception e) {
            }
        } else {
            try {
                SendData("A");
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_BTN_L1ActionPerformed

    private void BTN_L2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_L2ActionPerformed
        if (BTN_L2.isSelected()) {
            try {
                SendData("b");
            } catch (Exception e) {
            }
        } else {
            try {
                SendData("B");
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_BTN_L2ActionPerformed

    private void BTN_L3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_L3ActionPerformed
        if (BTN_L3.isSelected()) {
            try {
                SendData("c");
            } catch (Exception e) {
            }
        } else {
            try {
                SendData("C");
            } catch (Exception e) {
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_BTN_L3ActionPerformed

    private void BTN_L4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_L4ActionPerformed
        if (BTN_L4.isSelected()) {
            try {
                SendData("d");
            } catch (Exception e) {
            }
        } else {
            try {
                SendData("D");
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_BTN_L4ActionPerformed

    private void BTN_L5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_L5ActionPerformed
        if (BTN_L5.isSelected()) {
            try {
                SendData("e");
            } catch (Exception e) {
            }
        } else {
            try {
                SendData("E");
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_BTN_L5ActionPerformed

    private void BTN_ABOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ABOUTActionPerformed
        JDialog dd = new about(this, true);
        dd.setVisible(true);
    }//GEN-LAST:event_BTN_ABOUTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ui().setVisible(true);
        });
    }

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to quit now ?", "Quit", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

    private void SendData(String x) throws Exception {
        if (x == null || x.isEmpty()) {
            return;
        }
        if (WIFI_CONNECTED && WIFI_OUT_STREAM_OPEN) {

            if (WIFI_SOCKET == null) {

                return;
            }
            try {
                WIFI_BUFFERED_WRITER = new BufferedWriter(new OutputStreamWriter(WIFI_SOCKET.getOutputStream()));
                WIFI_BUFFERED_WRITER.write(x + "\n");
                WIFI_BUFFERED_WRITER.flush();

            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
    }

    private boolean WIFI_isConnected() {
        if (WIFI_SOCKET != null) {
            if (WIFI_SOCKET.isConnected()) {
                return true;
            }
        }
        return false;
    }

    private void ReceiveData() {

        WIFI_RECEIVE_THREAD = new Thread(() -> {
            WIFI_CONNECTED = true;
            WIFI_OUT_STREAM_OPEN = true;
            while (WIFI_isConnected()) {
                try {
                    if (WIFI_SOCKET.getInputStream().available() > 0) {
                        WIFI_BUFFER = new byte[WIFI_SOCKET.getInputStream().available()];
                        int ST_LENGTH = WIFI_SOCKET.getInputStream().available();
                        WIFI_SOCKET.getInputStream().read(WIFI_BUFFER, 0, ST_LENGTH);
                        WIFI_BUFFER_TO_STRING = new String(WIFI_BUFFER, StandardCharsets.UTF_8);
                        //processJson(WIFI_BUFFER_TO_STRING);
                        System.out.println(WIFI_BUFFER_TO_STRING);

                        WIFI_BUFFER_TO_STRING = WIFI_BUFFER_TO_STRING.trim();

                        if ("a".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L1.setSelected(true);
                        } else if ("A".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L1.setSelected(false);
                        }

                        if ("b".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L2.setSelected(true);
                        } else if ("B".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L2.setSelected(false);
                        }

                        if ("c".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L3.setSelected(true);
                        } else if ("C".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L3.setSelected(false);
                        }

                        if ("d".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L4.setSelected(true);
                        } else if ("D".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L4.setSelected(false);
                        }

                        if ("e".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L5.setSelected(true);
                        } else if ("E".equals(WIFI_BUFFER_TO_STRING)) {
                            BTN_L5.setSelected(false);
                        }

                        WIFI_BUFFER_TO_STRING = "";

                    }

                } catch (IOException e) {
                }
            }
        });
        WIFI_RECEIVE_THREAD.start();
        try {
            Thread.sleep(100);
        } catch (InterruptedException ex) {
        }
    }

    private void WIFI_closeConnecition() {
        if (WIFI_SOCKET != null) {
            if (WIFI_SOCKET.isConnected()) {
                try {
                    WIFI_CONNECTED = false;
                    WIFI_OUT_STREAM_OPEN = false;
                    WIFI_SOCKET.close();
                    WIFI_SOCKET = null;
                } catch (IOException e1) {
                }
            }
        }

    }

    public boolean isNumeric(String str) {
        try {
            int number = Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_ABOUT;
    private javax.swing.JToggleButton BTN_L1;
    private javax.swing.JToggleButton BTN_L2;
    private javax.swing.JToggleButton BTN_L3;
    private javax.swing.JToggleButton BTN_L4;
    private javax.swing.JToggleButton BTN_L5;
    private javax.swing.JButton WIFI_CONNECT_BTN;
    private javax.swing.JTextField WIFI_IP_TXF;
    private javax.swing.JTextField WIFI_PORT_TXF;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JToggleButton sabtn;
    // End of variables declaration//GEN-END:variables
}
